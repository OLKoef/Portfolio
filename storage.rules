rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Norwegian file storage architecture security rules
    
    // Private user files: user/{uid}/{fileId}
    match /user/{userId}/{fileId} {
      // Only authenticated users can access their own files
      allow read, write, delete: if request.auth != null 
                                && request.auth.uid == userId;
      
      // File upload validation
      allow create: if request.auth != null 
                   && request.auth.uid == userId
                   && validateFile(request.resource);
    }
    
    // Organization files: org/{orgId}/users/{uid}/{fileId}
    match /org/{orgId}/users/{userId}/{fileId} {
      // Only organization members can access these files
      allow read: if request.auth != null 
                 && (request.auth.uid == userId || isOrgMember(request.auth.uid, orgId));
      
      allow write, delete: if request.auth != null 
                          && request.auth.uid == userId
                          && isOrgMember(request.auth.uid, orgId);
      
      // File upload validation for organization files
      allow create: if request.auth != null 
                   && request.auth.uid == userId
                   && isOrgMember(request.auth.uid, orgId)
                   && validateFile(request.resource);
    }
    
    // Function to validate file uploads according to Norwegian specs
    function validateFile(resource) {
      // Basic size check only (simplified for debugging)
      let maxSize = 200 * 1024 * 1024;
      let validSize = resource.size <= maxSize && resource.size > 0;

      return validSize;
    }
    
    // Function to check organization membership (simplified)
    function isOrgMember(uid, orgId) {
      // This checks if the member document exists in Firestore
      return exists(/databases/(default)/documents/organizations/$(orgId)/members/$(uid));
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
